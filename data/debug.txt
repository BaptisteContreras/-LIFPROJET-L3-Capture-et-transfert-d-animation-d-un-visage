[439.418, 373.35]
[446.572, 359.506]
[456.194, 352.328]
[466.461, 354.175]
[477.906, 348.488]
[496.513, 351.08]
[517.674, 359.222]
[501.866, 372.484]
[486.753, 379.852]
[474.992, 383.079]
[464.265, 383.842]
[452.859, 382.001]
[446.79, 371.569]
[458.893, 362.833]
[468.668, 362.631]
[480.64, 359.288]
[509.911, 359.554]
[481.798, 360.725]
[470.263, 364.189]
[460.331, 364.317]


-----------------------------------------

[439.418, 373.35]
[446.572, 359.506]
[456.194, 352.328]
[466.461, 354.175]
[477.906, 348.488]
[496.513, 351.08]
[517.674, 359.222]
[501.866, 372.484]
[486.753, 379.852]
[474.992, 383.079]
[464.265, 383.842]
[452.859, 382.001]
[446.79, 371.569]
[458.893, 362.833]
[468.668, 362.631]
[480.64, 359.288]
[509.911, 359.554]
[481.798, 360.725]
[470.263, 364.189]
[460.331, 364.317]



----------------------------------------------
[439.418, 373.35]
[446.572, 359.506]
[456.194, 352.328]
[466.461, 354.175]
[477.906, 348.488]
[496.513, 351.08]
[517.674, 359.222]
[501.866, 372.484]
[486.753, 379.852]
[474.992, 383.079]
[464.265, 383.842]
[452.859, 382.001]
[446.79, 371.569]
[458.893, 362.833]
[468.668, 362.631]
[480.64, 359.288]
[509.911, 359.554]
[481.798, 360.725]
[470.263, 364.189]
[460.331, 364.317]

Mat& ScanImageAndReduceC(Mat& I, const uchar* const table)
{
    // accept only char type matrices
    CV_Assert(I.depth() == CV_8U);

    int channels = I.channels();

    int nRows = I.rows;
    int nCols = I.cols * channels;

    if (I.isContinuous())
    {
        nCols *= nRows;
        nRows = 1;
    }

    int i,j;
    uchar* p;
    for( i = 0; i < nRows; ++i)
    {
        p = I.ptr<uchar>(i);
        for ( j = 0; j < nCols; ++j)
        {
            p[j] = table[p[j]];
        }
    }
    return I;
}